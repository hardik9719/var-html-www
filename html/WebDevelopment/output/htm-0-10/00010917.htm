<html>
			<head>
				<title/>
				<meta name="generator" content="Altova StyleVision Enterprise Edition 2013 (x64) (http://www.altova.com)"/>
				<meta http-equiv="X-UA-Compatible" content="IE=7"/>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">@page { margin-left:2cm; margin-right:2cm; margin-top:2cm; margin-bottom:2cm } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body style="empty-cells:show; font-family:Tahoma; font-size:xx-small; text-align:left; vertical-align:top; word-wrap:break-word; ">
				<xsl:for-each select="$XML">
					<xsl:for-each select="n1:root">
						<br/>
						<center>
							<xsl:for-each select="n1:ReportCaption">
								<span style="font-size:medium; font-weight:bold; ">
									<xsl:apply-templates/>
								</span>
							</xsl:for-each>
						</center>
						<br/>
						<br/>
						<xsl:variable name="altova:table">
							<table style="width:20cm; " border="0" cellpadding="3" cellspacing="0">
								<xsl:variable name="altova:CurrContextGrid_0" select="."/>
								<xsl:variable name="altova:ColumnData"/>
								<tbody>
									<tr>
										<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
											<span>
												<xsl:text>Design Name</xsl:text>
											</span>
										</td>
										<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; width:16cm; ">
											<xsl:choose>
												<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
													<xsl:for-each select="n1:DesignName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
													<xsl:choose>
														<xsl:when test="string-length(n1:DesignName) &gt; 0">
															<xsl:for-each select="n1:DesignName">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<span>
																<xsl:text>&#160;</xsl:text>
															</span>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
													<xsl:for-each select="n1:DesignName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
													<xsl:for-each select="n1:DesignName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
													<xsl:for-each select="n1:DesignName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
											</xsl:choose>
										</td>
									</tr>
									<tr>
										<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
											<span>
												<xsl:text>Version Date</xsl:text>
											</span>
										</td>
										<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:16cm; ">
											<xsl:choose>
												<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
													<xsl:for-each select="n1:VersionDate">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
													<xsl:choose>
														<xsl:when test="string-length(n1:VersionDate) &gt; 0">
															<xsl:for-each select="n1:VersionDate">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<span>
																<xsl:text>&#160;</xsl:text>
															</span>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
													<xsl:for-each select="n1:VersionDate">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
													<xsl:for-each select="n1:VersionDate">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
													<xsl:for-each select="n1:VersionDate">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
											</xsl:choose>
										</td>
									</tr>
									<tr>
										<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
											<span>
												<xsl:text>Version Comment</xsl:text>
											</span>
										</td>
										<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:16cm; ">
											<xsl:choose>
												<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
													<xsl:for-each select="n1:VersionComment">
														<xsl:for-each select="n1:VersionCommentDetails">
															<xsl:for-each select="n1:VersionCommentRow">
																<xsl:apply-templates/>
																<br/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
													<xsl:choose>
														<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
															<xsl:for-each select="n1:VersionComment">
																<xsl:for-each select="n1:VersionCommentDetails">
																	<xsl:for-each select="n1:VersionCommentRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<span>
																<xsl:text>&#160;</xsl:text>
															</span>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
													<xsl:choose>
														<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
															<xsl:for-each select="n1:VersionComment">
																<xsl:for-each select="n1:VersionCommentDetails">
																	<xsl:for-each select="n1:VersionCommentRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise/>
													</xsl:choose>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
													<xsl:for-each select="n1:VersionComment">
														<xsl:for-each select="n1:VersionCommentDetails">
															<xsl:for-each select="n1:VersionCommentRow">
																<xsl:apply-templates/>
																<br/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
													<xsl:for-each select="n1:VersionComment">
														<xsl:for-each select="n1:VersionCommentDetails">
															<xsl:for-each select="n1:VersionCommentRow">
																<xsl:apply-templates/>
																<br/>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:when>
											</xsl:choose>
										</td>
									</tr>
									<tr>
										<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
											<span>
												<xsl:text>Model Name</xsl:text>
											</span>
										</td>
										<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:16cm; ">
											<xsl:choose>
												<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
													<xsl:for-each select="n1:ModelName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
													<xsl:choose>
														<xsl:when test="string-length(n1:ModelName) &gt; 0">
															<xsl:for-each select="n1:ModelName">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<span>
																<xsl:text>&#160;</xsl:text>
															</span>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
													<xsl:for-each select="n1:ModelName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
													<xsl:for-each select="n1:ModelName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
												<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
													<xsl:for-each select="n1:ModelName">
														<xsl:apply-templates/>
													</xsl:for-each>
												</xsl:when>
											</xsl:choose>
										</td>
									</tr>
								</tbody>
							</table>
						</xsl:variable>
						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
						<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
						</xsl:apply-templates>
						<xsl:for-each select="n1:MCollection">
							<xsl:for-each select="n1:MDetails">
								<br/>
								<span>
									<xsl:text>&#160;</xsl:text>
								</span>
								<xsl:variable name="altova:table">
									<table style="width:15cm; " border="0" cellpadding="3" cellspacing="0">
										<xsl:variable name="altova:CurrContextGrid_1" select="."/>
										<xsl:variable name="altova:ColumnData"/>
										<tbody>
											<tr>
												<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
													<span>
														<xsl:text>Measurement Name</xsl:text>
													</span>
												</td>
												<td style="background-color:#a5e7ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; width:11cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<br/>
															<h1>
																<xsl:for-each select="n1:MName">
																	<span style="font-size:xx-small; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
															</h1>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="string-length(n1:MName) &gt; 0">
																	<h1>
																		<xsl:for-each select="n1:MName">
																			<span style="font-size:xx-small; ">
																				<xsl:apply-templates/>
																			</span>
																		</xsl:for-each>
																	</h1>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<h1>
																<xsl:for-each select="n1:MName">
																	<span style="font-size:xx-small; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
															</h1>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<h1>
																<xsl:for-each select="n1:MName">
																	<span style="font-size:xx-small; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
															</h1>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<h1>
																<xsl:for-each select="n1:MName">
																	<span style="font-size:xx-small; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
															</h1>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
													<span>
														<xsl:text>Comment</xsl:text>
													</span>
												</td>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:11cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:MComment">
																<xsl:for-each select="n1:MCommentDetails">
																	<xsl:for-each select="n1:MCommentRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="count(n1:MComment/n1:MCommentDetails/n1:MCommentRow) &gt; 0">
																	<xsl:for-each select="n1:MComment">
																		<xsl:for-each select="n1:MCommentDetails">
																			<xsl:for-each select="n1:MCommentRow">
																				<xsl:apply-templates/>
																				<br/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:choose>
																<xsl:when test="count(n1:MComment/n1:MCommentDetails/n1:MCommentRow) &gt; 0">
																	<xsl:for-each select="n1:MComment">
																		<xsl:for-each select="n1:MCommentDetails">
																			<xsl:for-each select="n1:MCommentRow">
																				<xsl:apply-templates/>
																				<br/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise/>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:MComment">
																<xsl:for-each select="n1:MCommentDetails">
																	<xsl:for-each select="n1:MCommentRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:MComment">
																<xsl:for-each select="n1:MCommentDetails">
																	<xsl:for-each select="n1:MCommentRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
													<span>
														<xsl:text>Notes</xsl:text>
													</span>
												</td>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:11cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:MNotes">
																<xsl:for-each select="n1:MNotesDetails">
																	<xsl:for-each select="n1:MNoteRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="count(n1:MNotes/n1:MNotesDetails/n1:MNoteRow) &gt; 0">
																	<xsl:for-each select="n1:MNotes">
																		<xsl:for-each select="n1:MNotesDetails">
																			<xsl:for-each select="n1:MNoteRow">
																				<xsl:apply-templates/>
																				<br/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:choose>
																<xsl:when test="count(n1:MNotes/n1:MNotesDetails/n1:MNoteRow) &gt; 0">
																	<xsl:for-each select="n1:MNotes">
																		<xsl:for-each select="n1:MNotesDetails">
																			<xsl:for-each select="n1:MNoteRow">
																				<xsl:apply-templates/>
																				<br/>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise/>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:MNotes">
																<xsl:for-each select="n1:MNotesDetails">
																	<xsl:for-each select="n1:MNoteRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:MNotes">
																<xsl:for-each select="n1:MNotesDetails">
																	<xsl:for-each select="n1:MNoteRow">
																		<xsl:apply-templates/>
																		<br/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
													<span>
														<xsl:text>Value</xsl:text>
													</span>
												</td>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:11cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:MValue">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="string-length(n1:MValue) &gt; 0">
																	<xsl:for-each select="n1:MValue">
																		<xsl:apply-templates/>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:for-each select="n1:MValue">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:MValue">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:MValue">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
													<span>
														<xsl:text>Unit</xsl:text>
													</span>
												</td>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:11cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:MUnit">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="string-length(n1:MUnit) &gt; 0">
																	<xsl:for-each select="n1:MUnit">
																		<xsl:apply-templates/>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:for-each select="n1:MUnit">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:MUnit">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:MUnit">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
													<span>
														<xsl:text>Type</xsl:text>
													</span>
												</td>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:11cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:MType">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="string-length(n1:MCreationDate) &gt; 0">
																	<xsl:for-each select="n1:MType">
																		<xsl:apply-templates/>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:for-each select="n1:MType">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:MType">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:MType">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
													<span>
														<xsl:text>Creation Date</xsl:text>
													</span>
												</td>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:11cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:MCreationDate">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="string-length(n1:MCreationDate) &gt; 0">
																	<xsl:for-each select="n1:MCreationDate">
																		<xsl:apply-templates/>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:for-each select="n1:MCreationDate">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:MCreationDate">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:MCreationDate">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
											<tr>
												<td style="background-color:#d9f5ff; border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; font-weight:bold; width:4cm; ">
													<span>
														<xsl:text>Effective Note</xsl:text>
													</span>
												</td>
												<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:11cm; ">
													<xsl:choose>
														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
															<xsl:for-each select="n1:MEffectiveDate">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
															<xsl:choose>
																<xsl:when test="string-length(n1:MEffectiveDate) &gt; 0">
																	<xsl:for-each select="n1:MEffectiveDate">
																		<xsl:apply-templates/>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<span>
																		<xsl:text>&#160;</xsl:text>
																	</span>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
															<xsl:for-each select="n1:MEffectiveDate">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
															<xsl:for-each select="n1:MEffectiveDate">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
															<xsl:for-each select="n1:MEffectiveDate">
																<xsl:apply-templates/>
															</xsl:for-each>
														</xsl:when>
													</xsl:choose>
												</td>
											</tr>
										</tbody>
									</table>
								</xsl:variable>
								<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
								<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
								<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
									<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
								</xsl:apply-templates>
								<xsl:if test="count( n1:MUsedInObjectCollection)">
									<br/>
									<span style="font-size:xx-small; font-style:italic; ">
										<xsl:text>Impacted Objects</xsl:text>
									</span>
									<xsl:variable name="altova:table">
										<table style="width:25cm; " border="0" cellpadding="3" cellspacing="0">
											<xsl:variable name="altova:CurrContextGrid_2" select="."/>
											<xsl:variable name="altova:ColumnData"/>
											<thead style="background-color:#d9f5ff; ">
												<tr>
													<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:8cm; ">
														<span>
															<xsl:text>Model Name</xsl:text>
														</span>
													</th>
													<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:8.5cm; ">
														<span>
															<xsl:text>Type</xsl:text>
														</span>
													</th>
													<th style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; border-top-color:black; border-top-style:solid; border-top-width:thin; font-size:xx-small; text-align:center; width:8.5cm; ">
														<span>
															<xsl:text>Object Name</xsl:text>
														</span>
													</th>
												</tr>
											</thead>
											<tbody>
												<xsl:for-each select="n1:MUsedInObjectCollection">
													<xsl:for-each select="n1:MUsedInObjectDetails">
														<tr>
															<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-left-color:black; border-left-style:solid; border-left-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; text-align:left; width:8cm; ">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:ModelName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:ModelName) &gt; 0">
																				<xsl:for-each select="n1:ModelName">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<span>
																					<xsl:text>&#160;</xsl:text>
																				</span>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:ModelName">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:ModelName">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:ModelName">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</td>
															<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:8.5cm; ">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:TypeName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:TypeName) &gt; 0">
																				<xsl:for-each select="n1:TypeName">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<span>
																					<xsl:text>&#160;</xsl:text>
																				</span>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:TypeName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:TypeName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:TypeName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</td>
															<td style="border-bottom-color:black; border-bottom-style:solid; border-bottom-width:thin; border-right-color:black; border-right-style:solid; border-right-width:thin; font-size:xx-small; width:8.5cm; ">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:ObjectName">
																			<xsl:apply-templates/>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="string-length(n1:ObjectName) &gt; 0">
																				<xsl:for-each select="n1:ObjectName">
																					<xsl:apply-templates/>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<span>
																					<xsl:text>&#160;</xsl:text>
																				</span>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:for-each select="n1:ObjectName">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:ObjectName">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:ObjectName">
																			<span>
																				<xsl:value-of select="string-join(for $i in 1 to string-length(.) return substring(.,$i,1),codepoints-to-string(8203))"/>
																			</span>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</td>
														</tr>
													</xsl:for-each>
												</xsl:for-each>
											</tbody>
										</table>
									</xsl:variable>
									<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>
									<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>
									<xsl:apply-templates select="$altova:table" mode="altova:generate-table">
										<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
									</xsl:apply-templates>
								</xsl:if>
							</xsl:for-each>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</body>
		</html>