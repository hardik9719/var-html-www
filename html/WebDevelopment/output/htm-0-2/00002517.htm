<html>
tag. For example:

    print $q->start_html( -lang => 'fr-CA' );

The default if not specified is "en-US" for US English, unless the -dtd parameter
specifies an HTML 2.0 or 3.2 DTD, in which case the lang attribute is left off.
You can force the lang attribute to left off in other cases by passing an empty
string (-lang=>'').

The B<-encoding> argument can be used to specify the character set for XHTML. It
defaults to iso-8859-1 if not specified.

The B<-dtd> argument can be used to specify a public DTD identifier string. For
example:

    -dtd => '-//W3C//DTD HTML 4.01 Transitional//EN')

Alternatively, it can take public and system DTD identifiers as an array:

    -dtd => [
        '-//W3C//DTD HTML 4.01 Transitional//EN',
        'http://www.w3.org/TR/html4/loose.dtd'
    ]

For the public DTD identifier to be considered, it must be valid. Otherwise it
will be replaced by the default DTD. If the public DTD contains 'XHTML', CGI.pm
will emit XML.

The B<-declare_xml> argument, when used in conjunction with XHTML, will put a
<?xml> declaration at the top of the HTML header. The sole purpose of this
declaration is to declare the character set encoding. In the absence of
-declare_xml, the output HTML will contain a <meta> tag that specifies the
encoding, allowing the HTML to pass most validators. The default for -declare_xml
is false.

You can place other arbitrary HTML elements to the <head> section with the
B<-head> tag.  For example, to place a <link> element in the head section, use
this:

    print start_html(
        -head => Link({
            -rel  => 'shortcut icon',
            -href => 'favicon.ico'
        })
    );

To incorporate multiple HTML elements into the <head> section, just pass an
array reference:

    print start_html(
        -head => [
            Link({
                -rel  => 'next',
                -href => 'http://www.capricorn.com/s2.html'
            }),
            Link({
                -rel  => 'previous',
                -href => 'http://www.capricorn.com/s1.html'
            })
        ]
    );

And here's how to create an HTTP-EQUIV <meta> tag:

    print start_html(
        -head => meta({
            -http_equiv => 'Content-Type',
            -content    => 'text/html'
        })
    );


JAVASCRIPTING: The B<-script>, B<-noScript>, B<-onLoad>, B<-onMouseOver>,
B<-onMouseOut> and B<-onUnload> parameters are used to add JavaScript calls to
your pages. B<-script> should point to a block of text containing JavaScript
function definitions. This block will be placed within a <script> block inside
the HTML (not HTTP) header. The block is placed in the header in order to give
your page a fighting chance of having all its JavaScript functions in place even
if the user presses the stop button before the page has loaded completely. CGI.pm
attempts to format the script in such a way that JavaScript-naive browsers will
not choke on the code: unfortunately there are some browsers that get confused by
it nevertheless.

The B<-onLoad> and B<-onUnload> parameters point to fragments of JavaScript code
to execute when the page is respectively opened and closed by the browser.
Usually these parameters are calls to functions defined in the B<-script> field:

    $q = CGI->new;
    print header;
    $JSCRIPT = <<END;
        // Ask a silly question
        function riddle_me_this() {
            var r = prompt(
                "What walks on four legs in the morning, " +
                "two legs in the afternoon, " +
                "and three legs in the evening?"
            );
            response(r);
        }
        // Get a silly answer
        function response(answer) {
            if (answer == "man")
                alert("Right you are!");
            else
                alert("Wrong!  Guess again.");
        }
    END
    print start_html(
        -title  => 'The Riddle of the Sphinx',
        -script => $JSCRIPT
    );

Use the B<-noScript> parameter to pass some HTML text that will be displayed on 
browsers that do not have JavaScript (or browsers where JavaScript is turned
off).

The <script> tag, has several attributes including "type", "charset" and "src".
"src" allows you to keep JavaScript code in an external file. To use these
attributes pass a HASH reference in the B<-script> parameter containing one or
more of -type, -src, or -code:

    print $q->start_html(
        -title  => 'The Riddle of the Sphinx',
        -script => {
            -type => 'JAVASCRIPT',
            -src  => '/javascript/sphinx.js'}
        );

    print $q->(
        -title  => 'The Riddle of the Sphinx',
        -script => {
            -type => 'PERLSCRIPT',
            -code => 'print "hello world!\n;"'
        }
    );

A final feature allows you to incorporate multiple <script> sections into the
header. Just pass the list of script sections as an array reference. This allows
you to specify different source files for different dialects of JavaScript.
Example:

    print $q->start_html(
        -title  => 'The Riddle of the Sphinx',
        -script => [
            {
                -type => 'text/javascript',
                -src  => '/javascript/utilities10.js'
            },
            {
                -type => 'text/javascript',
                -src  => '/javascript/utilities11.js'
            },
            {
                -type => 'text/jscript',
                -src  => '/javascript/utilities12.js'
            },
            {
                -type => 'text/ecmascript',
                -src  => '/javascript/utilities219.js'
            }
        ]
    );

The option "-language" is a synonym for -type, and is supported for backwards
compatibility.

The old-style positional parameters are as follows:

B<Parameters:>

=over 4

=item 1.

The title

=item 2.

The author's e-mail address (will create a <link rev="MADE"> tag if present

=item 3.

A 'true' flag if you want to include a <base> tag in the header. This helps
resolve relative addresses to absolute ones when the document is moved, but
makes the document hierarchy non-portable. Use with care!

=back

Other parameters you want to include in the <body> tag may be appended to these.
This is a good place to put HTML extensions, such as colors and wallpaper
patterns.

=head2 Ending the Html document:

    print $q->end_html;

This ends an HTML document by printing the </body></html>