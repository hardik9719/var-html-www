<html><h1 class="refsect1">REGEXP_SUBSTR</h1>
<p><code>REGEXP_SUBSTR</code> searches a string for a pattern and returns the matching string.</p>
<p class="titleinrefsubsect"><a id="sthref572" name="sthref572"></a>Return Value</p>
<pre xml:space="preserve" class="oac_no_warn">CHAR | NCHAR | VARCHAR2 | NVARCHAR
</pre>
<p class="titleinrefsubsect"><a id="sthref573" name="sthref573"></a>Syntax</p>
<pre xml:space="preserve" class="oac_no_warn"><span class="bold">REGEXP_SUBSTR</span>(source_char, pattern
              [, position
                 [, occurrence
                    [, match_parameter ]
                 ]
              ]
             )
</pre>
<p class="titleinrefsubsect"><a id="sthref574" name="sthref574"></a>Arguments</p>
<p><code>source_char</code> is the text expression that is searched.</p>
<p><code>pattern</code> is the text expression to search for. It is usually a text literal and can contain up to 512 bytes. For a list of operators, refer to the <span class="italic">Oracle Database SQL Language Reference</span>, Appendix D, "Oracle Regular Expression Support."</p>
<p><code>position</code> is a nonzero integer indicating the character of <code>source_char</code> where the function begins the search. When <code>position</code> is negative, then the function counts and searches backward from the end of string. The default value of <code>position</code> is 1, which means that the function begins searching at the first character of <code>source_char</code>.</p>
<p><code>occurrence</code> is an integer indicating which occurrence of <code>pattern</code> the function should search for. The value of <code>occurrence</code> must be positive. The default values of <code>occurrence</code> is 1, meaning the function searches for the first occurrence of <code>pattern</code>.</p>
<p><code>match_parameter</code> is a text expression that lets you change the default matching behavior of the function. You can specify one or more of the following values:</p>
<ul>
<li>
<p><code>c</code>: Case-sensitive matching.</p>
</li>
<li>
<p><code>i</code>: Case-insensitive matching.</p>
</li>
<li>
<p><code>m</code>: Treat the source string as multiple lines. The function interprets <code>^</code> and <code>$</code> as the start and end, respectively, of any line anywhere in the source string, rather than only at the start or end of the entire source string. By default, the function treats the source string as a single line.</p>
</li>
<li>
<p><code>n</code>: New-line character is among the characters matched by a period (the wildcard character). By default, it is not.</p>
</li>
<li>
<p><code>x</code>: Ignore whitespace characters.</p>
</li>
</ul>
<p class="titleinrefsubsect"><a id="sthref575" name="sthref575"></a>Examples</p>
<p><code>REGEXP_SUBSTR('7 W 96th St, New York, NEW YORK', 'new york', 10, 2, 'i')</code> starts searching at the tenth character and matches <code>NEW YORK</code> in a case-insensitive match.</p>
<p><code>REGEXP_SUBSTR('parsley, sage, rosemary, thyme', 's[^,]+e', 1, 2)</code> starts searching at the first character and matches the second substring consisting of the letter <code>s</code>, any number of characters that are not commas, and the letter <code>e</code>. In this example, the function returns the value <code>sage</code>.</p>
</div>
</html>